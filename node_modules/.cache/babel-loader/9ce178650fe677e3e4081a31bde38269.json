{"ast":null,"code":"import moment from \"moment\";\nimport { firestore } from \"../../firebase\";\nconst Todo_db = firestore.collection(\"Todo\"); // 1. 액션 타입 정하기\n//  - 우리한테 필요한 액션이 뭐뭐 있을까요?\n//  - 어딘가에서 값을 가져다가 넣는 거(나중에 파이어스토어에서 가져오겠죠!),\n//    일정 만들기, 수정하기(완료도 수정에 포함인거 아시죠!), 삭제하기, \n//    앗! 이전, 다음 달을 움직이기 위해서 기준일을 바꿔주는 것도 있어야겠네요!\n\nconst LOAD = \"todo/LOAD\";\nconst ADD = \"todo/ADD\";\nconst UPDATE = \"todo/UPDATE\";\nconst DELETE = \"todo/DELETE\";\nconst CHANGE_TODAY = \"todo/CHANGE_TODAY\"; // 2. 액션 생성자 만들기\n//  - 액션을 반환할 액션 생성자를 만들어줘요.\n//  - 액션을 하기 위해(뭔가 바꾸기 위해) 필요한 데이터가 뭔지 잘 생각해서 파라미터를 받아옵시다! :)\n\nexport const loadTodo = todo_list => {\n  return {\n    type: LOAD,\n    todo_list\n  };\n};\nexport const addTodo = (date, todo_data) => {\n  return {\n    type: ADD,\n    date,\n    todo_data\n  };\n};\nexport const updateTodo = (date, todo_id, todo_data) => {\n  return {\n    type: UPDATE,\n    date,\n    todo_id,\n    todo_data\n  };\n};\nexport const deleteTodo = (date, todo_id) => {\n  return {\n    type: DELETE,\n    date,\n    todo_id\n  };\n};\nexport const changeToday = date => {\n  return {\n    type: CHANGE_TODAY,\n    date\n  };\n}; // 3. 기본 값 정해주기\n// 여기에 기본 값을 넣어줘요!\n\n/**\n * todo_list : 일정 목록\n * today : 기준일자(달력 월을 결정할 때 쓸거예요. today말고... base_date로 하고 싶은데... 다른 예제에서 제가 today로 했더라구요..8ㅛ8... 이르케 이름 짓기가 중요합니다... 맘대로 바꾸기가 쉽지가 않아요...)\n */\n\nconst initialState = {\n  today: moment(),\n  todo_list: {\n    \"2021-03-01\": [{\n      todo_id: 11,\n      datetime: \"2021-03-01 10:10:00\",\n      contents: \"산책가기1\",\n      completed: false\n    }, {\n      todo_id: 155555,\n      datetime: \"2021-03-01 10:15:00\",\n      contents: \"산책가기2\",\n      completed: true\n    }],\n    \"2021-03-21\": [{\n      todo_id: 8,\n      datetime: \"2021-03-21 10:00:00\",\n      contents: \"산책가기3\",\n      completed: false\n    }, {\n      todo_id: 4,\n      datetime: \"2021-03-21 10:10:00\",\n      contents: \"산책가기4\",\n      completed: false\n    }]\n  }\n}; // +) 5. 파이어스토어 연결하기! 미들웨어 thunk를 쓸거예요!\n//     - 데이터를 받아오고, 수정도 하고 생성도 하고..! 화이팅!\n\nexport const loadBucketFB = () => {\n  return function (dispatch) {\n    Todo_db.get().then(docs => {\n      let Todo_data = [];\n      docs.forEach(doc => {\n        Todo_data = [...Todo_data, {\n          id: doc.id,\n          ...doc.data()\n        }];\n      });\n      console.log(Todo_data);\n    });\n  };\n}; // 4. 리듀서 만들기\n//  - 이제 액션 별로 해야할 것(수정하고, 생성하고, ...)을 합시다!\n\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // 액션 별로 처리할 내용 넣기!\n    case \"todo/LOAD\":\n      return state;\n\n    case \"todo/ADD\":\n      {\n        // 액션으로 받아오는 것 : date, todo_data\n        const todo_list = { ...state.todo_list\n        }; // 데이터 넣는 부분!\n        // 1. 데이터 맹근다!\n\n        const new_todo_date = moment(action.date).format(\"YYYY-MM-DD\");\n        const new_todo_data = { ...action.todo_data,\n          todo_id: new Date().getTime() // 임시 아이디! (파이어베이스에 넣기 전까지 써요!)\n\n        }; // 새 일정 데이터\n        // 2. 원본 데이터랑 합친다!\n\n        let new_todo_list = {}; // 여기에 원본 데이터 + 추가할 일정을 넣을 겁니다!\n        // Object.keys(todo_list) : todo_list에서 키값만 가져다 배열을 만들거야\n        // Object.keys(todo_list).indexOf(new_todo_data) 근데, todo_list 키값 배열에 가짜 데이터 넣을 날짜로 된 키가 있나?\n        //   ㄴ있으면 어디있나 인덱스가 나오고, 없으면? -1이 나옵니다.\n        // Object.keys(todo_list).indexOf(new_todo_data) !== -1 : todo_list 키값 배열에 가짜 데이터 넣을 날짜 키가 있으면 true, 없으면 false\n\n        if (Object.keys(todo_list).indexOf(new_todo_date) !== -1) {\n          //   있으면, 원래 있던 배열이랑 합쳐주자!\n          new_todo_list = { ...todo_list,\n            [new_todo_date]: [...todo_list[new_todo_date], new_todo_data]\n          };\n        } else {\n          // 없으면 그냥 넣어주자!\n          new_todo_list = { ...todo_list,\n            [new_todo_date]: [new_todo_data]\n          };\n        } //   console.log(new_todo_list);\n        // 3. 합친 걸 넣자!\n\n\n        return { ...state,\n          todo_list: new_todo_list\n        };\n      }\n    // 액션으로 받아오는 것 : date, todo_id, todo_data\n\n    /**\n     *\n     * @param {*} date 일정이 있는 날짜 / 형식은 꼭 YYYY-MM-DD여야겠죠! (string이여야해요!)\n     * @param {*} todo_id 일정의 id\n     * @param {*} todo_data 고칠 내용! 딕셔너리({})로 받아옵니다. (text, completed, date가 고칠 수 있는 정보겠네요!)\n     */\n\n    case \"todo/UPDATE\":\n      {\n        const {\n          date,\n          todo_id,\n          todo_data\n        } = action; // date와 todo_id를 이용해서 삭제할 일정 찾아서 삭제하기\n        // 하나 복사합시다!\n\n        const _new_todo_list = { ...state.todo_list\n        }; // 지울 일정이 있는 날짜! 그 날짜에 어떤 일정이 있나 가져옵니다.\n\n        let todos = _new_todo_list[date]; // 새 전체 일정이 여기 들어갈거예요.\n\n        let new_todo_list = {}; // 만약 날짜가 달라졌다면? 해당 날짜에서 빼줘야해요! 그리고 새로운 날짜에 넣어줘야합니다. :)\n        // 아래 주석을 풀고 콘솔로 날짜가 같은 지, 다른 지 보세요!\n        // console.log(date === moment(todo_data.datetime).format(\"YYYY-MM-DD\"));\n\n        if (date === moment(todo_data.datetime).format(\"YYYY-MM-DD\")) {\n          // 날짜가 그대로라면?\n          // 해당 일자 데이터에서 지울 일정을 고쳐줍니다.\n          todos = todos.map(t => {\n            // 지울 일정의 todo_id와 todos 안에 있던 값의 todo_id를 비교해요.\n            // 만약 두 개가 같으면 고칠 데이터겠죠! 그럼 이 친구를 새로 받아온 데이터로 덮어씌워야겠다!\n            // 두 개가 다르면? 그대로 return해준다!\n            if (t.todo_id === todo_id) {\n              //   기존 내용에 고칠 내용을 덮어씌워요 :)\n              return { ...t,\n                ...todo_data\n              };\n            } else {\n              return t;\n            }\n          }); // 이제 새로운 일정 데이터(전체!)를 만들어줄게요.\n\n          new_todo_list = { ..._new_todo_list,\n            [date]: todos\n          };\n        } else {\n          // 날짜가 변했다면?\n          // 원래 일자에서 빼주고, 바뀐 일자엔 넣어주고!\n          //   이번엔 좀 한 번에 써볼게요 :) (상세하게 보고 싶으면 삭제 코드, 추가 코드 참고하기!)\n          // 새 일자를 상수에 넣어주고,\n          const _new_date = moment(todo_data.datetime).format(\"YYYY-MM-DD\"); // 해당 일자에 일정이 있었나 확인해요! 있었다면, 원래 배열을 유지하고, 없었다면 빈 배열로!\n\n\n          const _new_date_todos = _new_todo_list[_new_date] ? _new_todo_list[_new_date] : [];\n\n          new_todo_list = { ..._new_todo_list,\n            [date]: _new_todo_list[date].filter(t => t.todo_id !== todo_id),\n            [_new_date]: [..._new_date_todos, { ...todo_data\n            }]\n          };\n        } // 확인해보자!\n        // console.log(new_todo_list);\n        // 새 일정을 state에 넣으면 끝!\n\n\n        return { ...state,\n          todo_list: new_todo_list\n        };\n      }\n    // 액션으로 받아오는 것 : date, todo_id\n\n    /**\n     *\n     * @param {*} date 일정이 있는 날짜 / 형식은 꼭 YYYY-MM-DD여야겠죠! (string이여야해요!)\n     * @param {*} todo_id 지울 일정의 아이디!\n     */\n\n    case \"todo/DELETE\":\n      {\n        const {\n          date,\n          todo_id\n        } = action; // date와 todo_id를 이용해서 삭제할 일정 찾아서 삭제하기\n        // 하나 복사합시다!\n\n        const _new_todo_list = { ...state.todo_list\n        }; // 지울 일정이 있는 날짜! 그 날짜에 어떤 일정이 있나 가져옵니다.\n\n        let todos = _new_todo_list[date]; // 해당 일자 데이터에서 지울 일정을 빼줍니다. (지울거 빼고 나머지만 가져오기)\n\n        todos = todos.filter(t => {\n          // 지울 일정의 todo_id와 todos 안에 있던 값의 todo_id를 비교해요.\n          // 만약 두 개가 같으면 지워야하는 것이니, 걸러줘야겠죠!\n          // 두 개가 다르면? 그대로 todos에 남아 있어도 되고요.\n          return t.todo_id !== todo_id;\n        }); // 이제 새로운 일정 데이터(전체!)를 만들어줄게요.\n\n        const new_todo_list = { ..._new_todo_list,\n          [date]: todos\n        }; // 새 일정을 state에 넣으면 끝!\n\n        return { ...state,\n          todo_list: new_todo_list\n        };\n      }\n\n    case \"todo/CHANGE_TODAY\":\n      {\n        // action에서 받아오는 값 : date\n        return { ...state,\n          today: moment(action.date)\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/redux/modules/todo.js"],"names":["moment","firestore","Todo_db","collection","LOAD","ADD","UPDATE","DELETE","CHANGE_TODAY","loadTodo","todo_list","type","addTodo","date","todo_data","updateTodo","todo_id","deleteTodo","changeToday","initialState","today","datetime","contents","completed","loadBucketFB","dispatch","get","then","docs","Todo_data","forEach","doc","id","data","console","log","reducer","state","action","new_todo_date","format","new_todo_data","Date","getTime","new_todo_list","Object","keys","indexOf","_new_todo_list","todos","map","t","_new_date","_new_date_todos","filter"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nimport {firestore} from \"../../firebase\";\n\nconst Todo_db = firestore.collection(\"Todo\");\n\n\n\n\n// 1. 액션 타입 정하기\n//  - 우리한테 필요한 액션이 뭐뭐 있을까요?\n//  - 어딘가에서 값을 가져다가 넣는 거(나중에 파이어스토어에서 가져오겠죠!),\n//    일정 만들기, 수정하기(완료도 수정에 포함인거 아시죠!), 삭제하기, \n//    앗! 이전, 다음 달을 움직이기 위해서 기준일을 바꿔주는 것도 있어야겠네요!\nconst LOAD = \"todo/LOAD\";\nconst ADD = \"todo/ADD\";\nconst UPDATE = \"todo/UPDATE\";\nconst DELETE = \"todo/DELETE\";\nconst CHANGE_TODAY = \"todo/CHANGE_TODAY\";\n\n// 2. 액션 생성자 만들기\n//  - 액션을 반환할 액션 생성자를 만들어줘요.\n//  - 액션을 하기 위해(뭔가 바꾸기 위해) 필요한 데이터가 뭔지 잘 생각해서 파라미터를 받아옵시다! :)\nexport const loadTodo = (todo_list) => {\n    return {type: LOAD, todo_list}\n}\n\nexport const addTodo = (date, todo_data) => {\n    return {type: ADD, date, todo_data};\n}\n\nexport const updateTodo = (date, todo_id, todo_data) => {\n    return {type: UPDATE, date, todo_id, todo_data};\n}\n\nexport const deleteTodo = (date, todo_id) => {\n    return {type: DELETE, date, todo_id};\n}\n\nexport const changeToday = (date) => {\n    return {type: CHANGE_TODAY, date};\n}\n\n// 3. 기본 값 정해주기\n// 여기에 기본 값을 넣어줘요!\n/**\n * todo_list : 일정 목록\n * today : 기준일자(달력 월을 결정할 때 쓸거예요. today말고... base_date로 하고 싶은데... 다른 예제에서 제가 today로 했더라구요..8ㅛ8... 이르케 이름 짓기가 중요합니다... 맘대로 바꾸기가 쉽지가 않아요...)\n */\nconst initialState = {\n  today: moment(),\n  todo_list: {\n    \"2021-03-01\": [\n      {\n        todo_id: 11,\n        datetime: \"2021-03-01 10:10:00\",\n        contents: \"산책가기1\",\n        completed: false,\n      },\n      {\n        todo_id: 155555,\n        datetime: \"2021-03-01 10:15:00\",\n        contents: \"산책가기2\",\n        completed: true,\n      },\n    ],\n    \"2021-03-21\": [\n      {\n        todo_id: 8,\n        datetime: \"2021-03-21 10:00:00\",\n        contents: \"산책가기3\",\n        completed: false,\n      },\n      {\n        todo_id: 4,\n        datetime: \"2021-03-21 10:10:00\",\n        contents: \"산책가기4\",\n        completed: false,\n      },\n    ],\n  },\n};\n\n// +) 5. 파이어스토어 연결하기! 미들웨어 thunk를 쓸거예요!\n//     - 데이터를 받아오고, 수정도 하고 생성도 하고..! 화이팅!\n\n\n\nexport const loadBucketFB =() => {\n  return function(dispatch){\n\n    Todo_db.get().then((docs) => {\n      let Todo_data =[];\n\n      docs.forEach((doc) =>{\n        Todo_data = [...Todo_data, {id: doc.id, ...doc.data() }];\n      })\n\n      console.log(Todo_data);\n    });\n\n  }\n\n}\n\n\n\n\n// 4. 리듀서 만들기\n//  - 이제 액션 별로 해야할 것(수정하고, 생성하고, ...)을 합시다!\nexport default function reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    // 액션 별로 처리할 내용 넣기!\n    case \"todo/LOAD\":\n      return state;\n\n    case \"todo/ADD\": {\n      // 액션으로 받아오는 것 : date, todo_data\n      const todo_list = { ...state.todo_list };\n      // 데이터 넣는 부분!\n      // 1. 데이터 맹근다!\n      const new_todo_date = moment(action.date).format(\"YYYY-MM-DD\");\n      const new_todo_data = {\n        ...action.todo_data,\n        todo_id: new Date().getTime(), // 임시 아이디! (파이어베이스에 넣기 전까지 써요!)\n      }; // 새 일정 데이터\n\n      // 2. 원본 데이터랑 합친다!\n      let new_todo_list = {}; // 여기에 원본 데이터 + 추가할 일정을 넣을 겁니다!\n\n      // Object.keys(todo_list) : todo_list에서 키값만 가져다 배열을 만들거야\n      // Object.keys(todo_list).indexOf(new_todo_data) 근데, todo_list 키값 배열에 가짜 데이터 넣을 날짜로 된 키가 있나?\n      //   ㄴ있으면 어디있나 인덱스가 나오고, 없으면? -1이 나옵니다.\n      // Object.keys(todo_list).indexOf(new_todo_data) !== -1 : todo_list 키값 배열에 가짜 데이터 넣을 날짜 키가 있으면 true, 없으면 false\n      if (Object.keys(todo_list).indexOf(new_todo_date) !== -1) {\n        //   있으면, 원래 있던 배열이랑 합쳐주자!\n        new_todo_list = {\n          ...todo_list,\n          [new_todo_date]: [...todo_list[new_todo_date], new_todo_data],\n        };\n      } else {\n        // 없으면 그냥 넣어주자!\n        new_todo_list = { ...todo_list, [new_todo_date]: [new_todo_data] };\n      }\n\n      //   console.log(new_todo_list);\n      // 3. 합친 걸 넣자!\n      return { ...state, todo_list: new_todo_list };\n    }\n    // 액션으로 받아오는 것 : date, todo_id, todo_data\n    /**\n     *\n     * @param {*} date 일정이 있는 날짜 / 형식은 꼭 YYYY-MM-DD여야겠죠! (string이여야해요!)\n     * @param {*} todo_id 일정의 id\n     * @param {*} todo_data 고칠 내용! 딕셔너리({})로 받아옵니다. (text, completed, date가 고칠 수 있는 정보겠네요!)\n     */\n    case \"todo/UPDATE\": {\n      const { date, todo_id, todo_data } = action;\n      // date와 todo_id를 이용해서 삭제할 일정 찾아서 삭제하기\n      // 하나 복사합시다!\n      const _new_todo_list = { ...state.todo_list };\n\n      // 지울 일정이 있는 날짜! 그 날짜에 어떤 일정이 있나 가져옵니다.\n      let todos = _new_todo_list[date];\n\n      // 새 전체 일정이 여기 들어갈거예요.\n      let new_todo_list = {};\n      // 만약 날짜가 달라졌다면? 해당 날짜에서 빼줘야해요! 그리고 새로운 날짜에 넣어줘야합니다. :)\n      // 아래 주석을 풀고 콘솔로 날짜가 같은 지, 다른 지 보세요!\n      // console.log(date === moment(todo_data.datetime).format(\"YYYY-MM-DD\"));\n      if (date === moment(todo_data.datetime).format(\"YYYY-MM-DD\")) {\n        // 날짜가 그대로라면?\n        // 해당 일자 데이터에서 지울 일정을 고쳐줍니다.\n        todos = todos.map((t) => {\n          // 지울 일정의 todo_id와 todos 안에 있던 값의 todo_id를 비교해요.\n          // 만약 두 개가 같으면 고칠 데이터겠죠! 그럼 이 친구를 새로 받아온 데이터로 덮어씌워야겠다!\n          // 두 개가 다르면? 그대로 return해준다!\n          if (t.todo_id === todo_id) {\n            //   기존 내용에 고칠 내용을 덮어씌워요 :)\n            return { ...t, ...todo_data };\n          } else {\n            return t;\n          }\n        });\n\n        // 이제 새로운 일정 데이터(전체!)를 만들어줄게요.\n        new_todo_list = { ..._new_todo_list, [date]: todos };\n      } else {\n        // 날짜가 변했다면?\n        // 원래 일자에서 빼주고, 바뀐 일자엔 넣어주고!\n        //   이번엔 좀 한 번에 써볼게요 :) (상세하게 보고 싶으면 삭제 코드, 추가 코드 참고하기!)\n        // 새 일자를 상수에 넣어주고,\n        const _new_date = moment(todo_data.datetime).format(\"YYYY-MM-DD\");\n        // 해당 일자에 일정이 있었나 확인해요! 있었다면, 원래 배열을 유지하고, 없었다면 빈 배열로!\n        const _new_date_todos = _new_todo_list[_new_date]\n          ? _new_todo_list[_new_date]\n          : [];\n        new_todo_list = {\n          ..._new_todo_list,\n          [date]: _new_todo_list[date].filter((t) => t.todo_id !== todo_id),\n          [_new_date]: [..._new_date_todos, { ...todo_data }],\n        };\n      }\n\n      // 확인해보자!\n      // console.log(new_todo_list);\n\n      // 새 일정을 state에 넣으면 끝!\n      return { ...state, todo_list: new_todo_list };\n    }\n\n    // 액션으로 받아오는 것 : date, todo_id\n    /**\n     *\n     * @param {*} date 일정이 있는 날짜 / 형식은 꼭 YYYY-MM-DD여야겠죠! (string이여야해요!)\n     * @param {*} todo_id 지울 일정의 아이디!\n     */\n    case \"todo/DELETE\":{\n        const {date, todo_id} = action;\n      // date와 todo_id를 이용해서 삭제할 일정 찾아서 삭제하기\n      // 하나 복사합시다!\n      const _new_todo_list = { ...state.todo_list };\n\n      // 지울 일정이 있는 날짜! 그 날짜에 어떤 일정이 있나 가져옵니다.\n      let todos = _new_todo_list[date];\n\n      // 해당 일자 데이터에서 지울 일정을 빼줍니다. (지울거 빼고 나머지만 가져오기)\n      todos = todos.filter((t) => {\n        // 지울 일정의 todo_id와 todos 안에 있던 값의 todo_id를 비교해요.\n        // 만약 두 개가 같으면 지워야하는 것이니, 걸러줘야겠죠!\n        // 두 개가 다르면? 그대로 todos에 남아 있어도 되고요.\n        return t.todo_id !== todo_id;\n      });\n\n      // 이제 새로운 일정 데이터(전체!)를 만들어줄게요.\n      const new_todo_list = { ..._new_todo_list, [date]: todos };\n\n      // 새 일정을 state에 넣으면 끝!\n      return {...state, todo_list: new_todo_list};\n\n    }\n    case \"todo/CHANGE_TODAY\":{\n      // action에서 받아오는 값 : date\n      return { ...state, today: moment(action.date) };\n    }\n\n      \n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}