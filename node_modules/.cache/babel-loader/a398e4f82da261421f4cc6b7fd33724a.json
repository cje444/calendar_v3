{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Popup.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\nimport styled from \"styled-components\"; // 임포트 해오기!\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTodo, deleteTodo } from \"./redux/modules/todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Popup = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    type,\n    selected_todo,\n    _showPopup\n  } = props;\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null); // 팝업 타입이 todo_detail일 경우!\n\n  if (type === \"todo_detail\") {\n    if (!selected_todo) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(Dim, {\n      onClick: e => {\n        // 팝업 닫기!\n        props._showPopup(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        bg: \"#ffffff\",\n        width: \"50vw\",\n        margin: \"auto\",\n        height: \"auto\",\n        padding: \"16px\",\n        onClick: e => {\n          // 이벤트 전파를 막아줘요! 2주차 과제 하실 때 본 칭구들! :)\n          e.stopPropagation();\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          flex_direction: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            padding: \"0px 0px 8px 0px\",\n            justify_contents: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              type: \"title\",\n              children: \"\\uC77C\\uC815 \\uC0C1\\uC138\\uBCF4\\uAE30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, this), !selected_todo.completed && /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                //   완료 데이터를 만들어줄거예요.\n                let update_data = { ...selected_todo,\n                  completed: true\n                }; //   그리고 데이터 수정하는 액션를 불러다가 수정!\n\n                dispatch(updateTodo(moment(selected_todo.datetime).format(\"YYYY-MM-DD\"), selected_todo.todo_id, update_data));\n\n                _showPopup(false);\n              },\n              children: \"\\uC644\\uB8CC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            flex_direction: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              type: \"label\",\n              children: \"\\uB0B4\\uC6A9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              placeholder: selected_todo.contents,\n              ref: contents\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              type: \"label\",\n              children: \"\\uC77C\\uC790\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"datetime-local\",\n              placeholder: selected_todo.datetime,\n              ref: datetime\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            border: \"1px 0px 0px 0px solid #888\",\n            justify_contents: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              bg: true,\n              onClick: () => {\n                dispatch(deleteTodo(moment(selected_todo.datetime).format(\"YYYY-MM-DD\"), selected_todo.todo_id));\n\n                _showPopup(false);\n              },\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => {\n                //   수정할 데이터를 만들어줄거예요.\n                let update_data = {}; //   입력한 내용이 없으면 그대로 유지!\n\n                let _contents = contents.current.value === \"\" ? selected_todo.contents : contents.current.value;\n\n                let _datetime = datetime.current.value === \"\" ? selected_todo.datetime : datetime.current.value; //   수정할 데이터를 만들어요!\n\n\n                update_data = { ...selected_todo,\n                  contents: _contents,\n                  datetime: moment(_datetime).format(\"YYYY-MM-DD hh:mm:ss\")\n                };\n                dispatch(updateTodo(moment(selected_todo.datetime).format(\"YYYY-MM-DD\"), selected_todo.todo_id, update_data));\n\n                _showPopup(false);\n              },\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  return null;\n};\n\n_s(Popup, \"A+Iwg98THv4BIIQQTCpUN0XXPn0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Popup;\nPopup.defaultProps = {\n  type: \"alert\",\n  selected_todo: null,\n  _showPopup: () => {}\n}; // background: #00000055; <- 앗 해쉬가 8글자? :) 6글자는 컬러를, 뒤의 두글자는 투명도를 나타냅니다.\n\nconst Dim = styled.div`\n  position: fixed;\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  background: #00000055;\n`;\n_c2 = Dim;\nexport default Popup;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Popup\");\n$RefreshReg$(_c2, \"Dim\");","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Popup.js"],"names":["React","Grid","Button","Text","Input","moment","styled","useSelector","useDispatch","updateTodo","deleteTodo","Popup","props","dispatch","type","selected_todo","_showPopup","contents","useRef","datetime","e","stopPropagation","completed","update_data","format","todo_id","_contents","current","value","_datetime","defaultProps","Dim","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,EAA6BC,KAA7B,QAA0C,UAA1C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,sBAAvC;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,aAAR;AAAuBC,IAAAA;AAAvB,MAAqCJ,KAA3C;AAEA,QAAMK,QAAQ,GAAGjB,KAAK,CAACkB,MAAN,CAAa,IAAb,CAAjB;AACA,QAAMC,QAAQ,GAAGnB,KAAK,CAACkB,MAAN,CAAa,IAAb,CAAjB,CALuB,CAOvB;;AACA,MAAIJ,IAAI,KAAK,aAAb,EAA4B;AAC1B,QAAI,CAACC,aAAL,EAAoB;AAClB,aAAO,IAAP;AACD;;AACD,wBACE,QAAC,GAAD;AACE,MAAA,OAAO,EAAGK,CAAD,IAAO;AACd;AACAR,QAAAA,KAAK,CAACI,UAAN,CAAiB,KAAjB;AACD,OAJH;AAAA,6BAME,QAAC,IAAD;AACE,QAAA,EAAE,EAAC,SADL;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,MAAM,EAAC,MAHT;AAIE,QAAA,MAAM,EAAC,MAJT;AAKE,QAAA,OAAO,EAAC,MALV;AAME,QAAA,OAAO,EAAGI,CAAD,IAAO;AACd;AACAA,UAAAA,CAAC,CAACC,eAAF;AACD,SATH;AAAA,+BAWE,QAAC,IAAD;AAAM,UAAA,cAAc,EAAC,QAArB;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,OAAO,EAAC,iBAAd;AAAgC,YAAA,gBAAgB,EAAC,eAAjD;AAAA,oCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEG,CAACN,aAAa,CAACO,SAAf,iBACC,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,MAAM;AACb;AACA,oBAAIC,WAAW,GAAG,EAAE,GAAGR,aAAL;AAAoBO,kBAAAA,SAAS,EAAE;AAA/B,iBAAlB,CAFa,CAIb;;AACAT,gBAAAA,QAAQ,CACNJ,UAAU,CACRJ,MAAM,CAACU,aAAa,CAACI,QAAf,CAAN,CAA+BK,MAA/B,CAAsC,YAAtC,CADQ,EAERT,aAAa,CAACU,OAFN,EAGRF,WAHQ,CADJ,CAAR;;AAOAP,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,eAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAwBE,QAAC,IAAD;AAAM,YAAA,cAAc,EAAC,QAArB;AAAA,oCACE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,WAAW,EAAED,aAAa,CAACE,QAF7B;AAGE,cAAA,GAAG,EAAEA;AAHP;AAAA;AAAA;AAAA;AAAA,oBAFF,eAOE,QAAC,IAAD;AAAM,cAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,gBADP;AAEE,cAAA,WAAW,EAAEF,aAAa,CAACI,QAF7B;AAGE,cAAA,GAAG,EAAEA;AAHP;AAAA;AAAA;AAAA;AAAA,oBARF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxBF,eAsCE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,kBAtCF,eAuCE,QAAC,IAAD;AACE,YAAA,MAAM,EAAC,4BADT;AAEE,YAAA,gBAAgB,EAAC,eAFnB;AAAA,oCAIE,QAAC,MAAD;AACE,cAAA,EAAE,MADJ;AAEE,cAAA,OAAO,EAAE,MAAM;AACbN,gBAAAA,QAAQ,CACNH,UAAU,CACRL,MAAM,CAACU,aAAa,CAACI,QAAf,CAAN,CAA+BK,MAA/B,CAAsC,YAAtC,CADQ,EAERT,aAAa,CAACU,OAFN,CADJ,CAAR;;AAMAT,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,eAVH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,eAkBE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,MAAM;AACb;AACA,oBAAIO,WAAW,GAAG,EAAlB,CAFa,CAGb;;AACA,oBAAIG,SAAS,GACXT,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,KAA2B,EAA3B,GACIb,aAAa,CAACE,QADlB,GAEIA,QAAQ,CAACU,OAAT,CAAiBC,KAHvB;;AAIA,oBAAIC,SAAS,GACXV,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB,KAA2B,EAA3B,GACIb,aAAa,CAACI,QADlB,GAEIA,QAAQ,CAACQ,OAAT,CAAiBC,KAHvB,CARa,CAab;;;AACAL,gBAAAA,WAAW,GAAG,EACZ,GAAGR,aADS;AAEZE,kBAAAA,QAAQ,EAAES,SAFE;AAGZP,kBAAAA,QAAQ,EAAEd,MAAM,CAACwB,SAAD,CAAN,CAAkBL,MAAlB,CAAyB,qBAAzB;AAHE,iBAAd;AAMAX,gBAAAA,QAAQ,CACNJ,UAAU,CACRJ,MAAM,CAACU,aAAa,CAACI,QAAf,CAAN,CAA+BK,MAA/B,CAAsC,YAAtC,CADQ,EAERT,aAAa,CAACU,OAFN,EAGRF,WAHQ,CADJ,CAAR;;AAOAP,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,eA7BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAXF;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YADF;AAiHD;;AAED,SAAO,IAAP;AACD,CAhID;;GAAML,K;UACaH,W;;;KADbG,K;AAkINA,KAAK,CAACmB,YAAN,GAAqB;AACnBhB,EAAAA,IAAI,EAAE,OADa;AAEnBC,EAAAA,aAAa,EAAE,IAFI;AAGnBC,EAAAA,UAAU,EAAE,MAAM,CAAE;AAHD,CAArB,C,CAMA;;AACA,MAAMe,GAAG,GAAGzB,MAAM,CAAC0B,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,CANA;MAAMD,G;AAQN,eAAepB,KAAf","sourcesContent":["import React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\n\nimport styled from \"styled-components\";\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTodo, deleteTodo } from \"./redux/modules/todo\";\n\nconst Popup = (props) => {\n  const dispatch = useDispatch();\n  const { type, selected_todo, _showPopup} = props;\n\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null);\n\n  // 팝업 타입이 todo_detail일 경우!\n  if (type === \"todo_detail\") {\n    if (!selected_todo) {\n      return null;\n    }\n    return (\n      <Dim\n        onClick={(e) => {\n          // 팝업 닫기!\n          props._showPopup(false);\n        }}\n      >\n        <Grid\n          bg=\"#ffffff\"\n          width=\"50vw\"\n          margin=\"auto\"\n          height=\"auto\"\n          padding=\"16px\"\n          onClick={(e) => {\n            // 이벤트 전파를 막아줘요! 2주차 과제 하실 때 본 칭구들! :)\n            e.stopPropagation();\n          }}\n        >\n          <Grid flex_direction=\"column\">\n            <Grid padding=\"0px 0px 8px 0px\" justify_contents=\"space-between\">\n              <Text type=\"title\">일정 상세보기</Text>\n              {!selected_todo.completed && (\n                <Button\n                  onClick={() => {\n                    //   완료 데이터를 만들어줄거예요.\n                    let update_data = { ...selected_todo, completed: true };\n\n                    //   그리고 데이터 수정하는 액션를 불러다가 수정!\n                    dispatch(\n                      updateTodo(\n                        moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                        selected_todo.todo_id,\n                        update_data\n                      )\n                    );\n                    _showPopup(false);\n                  }}\n                >\n                  완료\n                </Button>\n              )}\n            </Grid>\n            <Grid flex_direction=\"column\">\n              <Text type=\"label\">내용</Text>\n              <Input\n                type=\"text\"\n                placeholder={selected_todo.contents}\n                ref={contents}\n              />\n              <Text type=\"label\">일자</Text>\n              <Input\n                type=\"datetime-local\"\n                placeholder={selected_todo.datetime}\n                ref={datetime}\n              />\n            </Grid>\n            <Grid></Grid>\n            <Grid\n              border=\"1px 0px 0px 0px solid #888\"\n              justify_contents=\"space-between\"\n            >\n              <Button\n                bg\n                onClick={() => {\n                  dispatch(\n                    deleteTodo(\n                      moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                      selected_todo.todo_id\n                    )\n                  );\n                  _showPopup(false);\n                }}\n              >\n                삭제\n              </Button>\n              <Button\n                onClick={() => {\n                  //   수정할 데이터를 만들어줄거예요.\n                  let update_data = {};\n                  //   입력한 내용이 없으면 그대로 유지!\n                  let _contents =\n                    contents.current.value === \"\"\n                      ? selected_todo.contents\n                      : contents.current.value;\n                  let _datetime =\n                    datetime.current.value === \"\"\n                      ? selected_todo.datetime\n                      : datetime.current.value;\n\n                  //   수정할 데이터를 만들어요!\n                  update_data = {\n                    ...selected_todo,\n                    contents: _contents,\n                    datetime: moment(_datetime).format(\"YYYY-MM-DD hh:mm:ss\"),\n                  };\n\n                  dispatch(\n                    updateTodo(\n                      moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                      selected_todo.todo_id,\n                      update_data\n                    )\n                  );\n                  _showPopup(false);\n                }}\n              >\n                수정\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Dim>\n    );\n  }\n\n  return null;\n};\n\nPopup.defaultProps = {\n  type: \"alert\",\n  selected_todo: null,\n  _showPopup: () => {},\n};\n\n// background: #00000055; <- 앗 해쉬가 8글자? :) 6글자는 컬러를, 뒤의 두글자는 투명도를 나타냅니다.\nconst Dim = styled.div`\n  position: fixed;\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  background: #00000055;\n`;\n\nexport default Popup;\n"]},"metadata":{},"sourceType":"module"}