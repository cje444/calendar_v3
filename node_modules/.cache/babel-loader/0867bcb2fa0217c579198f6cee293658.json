{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Styles.js\";\nimport React from \"react\";\nimport styled from \"styled-components\"; // 스타일을 이렇게 파일 하나에 몰아두면 편히 관리할 수 있어요! :)\n// 겉 껍데기 담당\n\n/**\n * props \n *  - flex_direction : string ㅣ row = 가로로 쌓기, column = 세로로 쌓기 (만약 값 없다면?->가로가 기본이 됩니다.)\n *  - border : string | border 속성 넣기(ex: 1px solid #dddddd)\n *  - bg: string | #aaaaaa = # + 헥사코드 (ex: #ffffff)\n *  - width: string | 1em, 1px, 1% 등 넓이 값 (기본 값: 100%;)\n *  - height: string | 1em, 1px, 1% 등 높이 값 (기본 값: 100%;)\n *  - is_root : boolean | true = 최상위 div, false = 최상위 아님\n *  - margin : (default = false) string | margin 값\n *  - padding : (default = false) string | padding 값\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: ${props => props.flex_direction === \"column\" ? \"column\" : \"row\"};\n  ${props => props.border ? `border: ${props.border};` : \"\"}\n  ${props => props.bg ? `background-color: ${props.bg};` : \"\"}\n  width: ${props => props.width ? props.width : \"100%\"};\n  min-width: 50px;\n  height: ${props => props.height ? props.height : \"100%\"};\n  align-items: center;\n  justify-content: ${props => props.justify_contents ? props.justify_contents : \"flex-start\"};\n  ${props => props.margin ? `margin: ${props.margin};` : \"\"}\n  ${props => props.padding ? `padding: ${props.padding};` : \"\"}\n  ${props => props.is_root ? `width: 100vw; height: 100vh;` : \"\"}\n  ${props => props.hover ? `&:hover{cursor: pointer; background-color: #44444455;}` : \"\"}\n`; // 버튼\n\n/**\n * props \n *  - flex_direction : string ㅣ row = 가로로 쌓기, column = 세로로 쌓기 (만약 값 없다면?->가로가 기본이 됩니다.)\n *  - bg : boolean | true = 배경색 있는 버전, false = 배경색 없는 버전\n *  - float : boolean | true = 플로팅 버튼 bottom, right 속성 사용해서 위치 조절\n */\n\nconst Button = styled.button`\n  padding: 8px 16px;\n  border: none;\n  ${props => props.bg && \"background-color: #ff4d4d; color: #fff;\"}\n  ${props => props.float && `position: fixed; z-index: 10; right: ${props.right}; bottom: ${props.bottom};`}\n`; // text 담당\n\n/**\n * props\n *  - type : string | title = 제목글(큰 글씨 + 볼드), contents = 내용글(중간 글씨), label = 라벨(작은 글씨)\n *  - bold : boolean | true면 볼드 줌, false면 볼드 안줌\n */\n\nconst Text = props => {\n  if (props.type === \"title\") {\n    return /*#__PURE__*/_jsxDEV(H1, {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (props.type === \"contents\") {\n    return /*#__PURE__*/_jsxDEV(P, {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (props.type === \"label\") {\n    return /*#__PURE__*/_jsxDEV(Span, {\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 16\n    }, this);\n    ;\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Text;\nconst H1 = styled.h1`\n    margin: 0px;\n    font-size: 1.5em;\n    text-align: center;\n    ${props => props.bold ? `font-weight: bold;` : ''}\n`;\n_c2 = H1;\nconst P = styled.p`\n  margin: 0px;\n  font-size: 1em;\n`;\n_c3 = P;\nconst Span = styled.span`\n  margin: 0px;\n  font-size: 0.4em;\n  color: #888;\n`; // input 스타일!\n\n_c4 = Span;\nconst Input = styled.input`\n  width: 100%;\n  border: 1px solid #888;\n  padding: 2px 4px;\n  margin: 8px;\n`;\nexport { Grid, Button, Text, Input };\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Text\");\n$RefreshReg$(_c2, \"H1\");\n$RefreshReg$(_c3, \"P\");\n$RefreshReg$(_c4, \"Span\");","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Styles.js"],"names":["React","styled","Grid","div","props","flex_direction","border","bg","width","height","justify_contents","margin","padding","is_root","hover","Button","button","float","right","bottom","Text","type","children","H1","h1","bold","P","p","Span","span","Input","input"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\n// 스타일을 이렇게 파일 하나에 몰아두면 편히 관리할 수 있어요! :)\n\n// 겉 껍데기 담당\n/**\n * props \n *  - flex_direction : string ㅣ row = 가로로 쌓기, column = 세로로 쌓기 (만약 값 없다면?->가로가 기본이 됩니다.)\n *  - border : string | border 속성 넣기(ex: 1px solid #dddddd)\n *  - bg: string | #aaaaaa = # + 헥사코드 (ex: #ffffff)\n *  - width: string | 1em, 1px, 1% 등 넓이 값 (기본 값: 100%;)\n *  - height: string | 1em, 1px, 1% 등 높이 값 (기본 값: 100%;)\n *  - is_root : boolean | true = 최상위 div, false = 최상위 아님\n *  - margin : (default = false) string | margin 값\n *  - padding : (default = false) string | padding 값\n */\nconst Grid = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: ${(props) =>\n    props.flex_direction === \"column\" ? \"column\" : \"row\"};\n  ${(props) => (props.border ? `border: ${props.border};` : \"\")}\n  ${(props) => (props.bg ? `background-color: ${props.bg};` : \"\")}\n  width: ${(props) => (props.width ? props.width : \"100%\")};\n  min-width: 50px;\n  height: ${(props) => (props.height ? props.height : \"100%\")};\n  align-items: center;\n  justify-content: ${(props) =>\n    props.justify_contents ? props.justify_contents : \"flex-start\"};\n  ${(props) => (props.margin ? `margin: ${props.margin};` : \"\")}\n  ${(props) => (props.padding ? `padding: ${props.padding};` : \"\")}\n  ${(props) => (props.is_root ? `width: 100vw; height: 100vh;` : \"\")}\n  ${(props) => (props.hover)? `&:hover{cursor: pointer; background-color: #44444455;}` : \"\"}\n`;\n\n\n// 버튼\n/**\n * props \n *  - flex_direction : string ㅣ row = 가로로 쌓기, column = 세로로 쌓기 (만약 값 없다면?->가로가 기본이 됩니다.)\n *  - bg : boolean | true = 배경색 있는 버전, false = 배경색 없는 버전\n *  - float : boolean | true = 플로팅 버튼 bottom, right 속성 사용해서 위치 조절\n */\nconst Button = styled.button`\n  padding: 8px 16px;\n  border: none;\n  ${(props) => props.bg && \"background-color: #ff4d4d; color: #fff;\"}\n  ${(props) =>\n    props.float &&\n    `position: fixed; z-index: 10; right: ${props.right}; bottom: ${props.bottom};`}\n`;\n\n\n// text 담당\n/**\n * props\n *  - type : string | title = 제목글(큰 글씨 + 볼드), contents = 내용글(중간 글씨), label = 라벨(작은 글씨)\n *  - bold : boolean | true면 볼드 줌, false면 볼드 안줌\n */\nconst Text = (props) => {\n    if(props.type === \"title\"){\n        return <H1>{props.children}</H1>;\n    }\n\n    if(props.type === \"contents\"){\n        return <P>{props.children}</P>;\n    }\n\n    if(props.type === \"label\"){\n        return <Span>{props.children}</Span>;;\n    }\n   \n    return (\n      <React.Fragment>\n        {props.children}\n      </React.Fragment>\n    );\n}\n\nconst H1 = styled.h1`\n    margin: 0px;\n    font-size: 1.5em;\n    text-align: center;\n    ${(props)=> props.bold? `font-weight: bold;` : ''}\n`;\n\nconst P = styled.p`\n  margin: 0px;\n  font-size: 1em;\n`;\n\nconst Span = styled.span`\n  margin: 0px;\n  font-size: 0.4em;\n  color: #888;\n`;\n\n\n// input 스타일!\nconst Input = styled.input`\n  width: 100%;\n  border: 1px solid #888;\n  padding: 2px 4px;\n  margin: 8px;\n`;\n\nexport { Grid, Button, Text, Input };"]},"metadata":{},"sourceType":"module"}