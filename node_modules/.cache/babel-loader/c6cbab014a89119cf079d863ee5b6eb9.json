{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Write.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\nimport styled from \"styled-components\"; // 임포트 해오기!\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addTodo } from \"./redux/modules/todo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Write = props => {\n  _s();\n\n  // 디스패치부터 만들기!\n  const dispatch = useDispatch(); // 작성할 내용과 시간을 ref로 넣을거예요. :)\n\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null); // 일정데이터가 지금은 Main 컴포넌트에 있죠!\n  // 아직은 그 데이터를 수정하기가 곤란해요.\n  // 리덕스를 붙이기 전까지는 우리 콘솔로 데이터 형식에 맞게 추가가 잘 되었나만 확인해봐요!\n\n  const writeTodo = () => {\n    // 콘솔로 내가 선택한 데이터가 잘 왔나 확인해볼까요? :)\n    // console.log(contents.current.value);\n    // console.log(datetime.current.value);\n    // 내용 없으면 경고!\n    if (contents.current.value === \"\") {\n      window.alert(\"내용을 입력해주세요!\");\n      return;\n    } // 일시 없으면 경고!\n\n\n    if (datetime.current.value === \"\") {\n      window.alert(\"날짜를 입력해주세요!\");\n      return;\n    }\n\n    let _new_todo = {\n      todo_id: \"dummy_id1111\",\n      // 아이디는 나중에 디비에 저장되면, 그때 가져와야죠! 일단 가짜로 둡니다!\n      datetime: moment(datetime.current.value).format(\"YYYY-MM-DD hh:mm:ss\"),\n      // 우리 데이터 형식대로 맞춰줍니다.\n      contents: contents.current.value,\n      completed: false // 지금 만들었으니 당연히 false겠죠!\n\n    }; // 주석을 풀고 데이터를 확인해봐요!\n    // console.log(_new_todo);\n    // 리덕스에 넣자!\n\n    dispatch(addTodo(_new_todo.datetime, _new_todo)); // 추가로 하나만 더! 일정을 추가했으면 원래 페이지로 돌아가야죠! replace 사용해봅시다!\n\n    props.history.replace(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    margin: \"auto\",\n    flex_direction: \"column\",\n    width: \"80vw\",\n    height: \"80vh\",\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      type: \"title\",\n      children: \"\\uC77C\\uC815 \\uB9CC\\uB4E4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      bg: \"#ffffff\",\n      flex_direction: \"column\",\n      width: \"80vw\",\n      padding: \"16px\",\n      margin: \"8px auto\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        type: \"label\",\n        children: \"- \\uB0B4\\uC6A9 -\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"text\",\n        ref: contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        type: \"label\",\n        children: \"- \\uB0A0\\uC9DC -\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        type: \"datetime-local\",\n        ref: datetime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonSave, {\n        onClick: writeTodo,\n        children: \"\\uC77C\\uC815 \\uCD94\\uAC00\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Write, \"A+Iwg98THv4BIIQQTCpUN0XXPn0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Write;\nconst Title = styled.h1`\n  color: #364f6b;\n  text-align: center;\n`;\n_c2 = Title;\nconst ButtonSave = styled.button`\n  padding: 10px 25px;\n  background-color: #3fc1c9;\n  color: white;\n  font-size:20px;\n  font-weight: bold;\n  border: 1px solid #3fc1c9;\n  border-radius: 30px;\n  margin: 30px 70px;\n  width: 200px;\n  height: 50px;\n`;\n_c3 = ButtonSave;\nexport default Write;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Write\");\n$RefreshReg$(_c2, \"Title\");\n$RefreshReg$(_c3, \"ButtonSave\");","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Write.js"],"names":["React","Grid","Button","Text","Input","moment","styled","useSelector","useDispatch","addTodo","Write","props","dispatch","contents","useRef","datetime","writeTodo","current","value","window","alert","_new_todo","todo_id","format","completed","history","replace","Title","h1","ButtonSave","button"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {addTodo} from \"./redux/modules/todo\";\n\nconst Write = (props) => {\n  // 디스패치부터 만들기!\n  const dispatch = useDispatch();\n  // 작성할 내용과 시간을 ref로 넣을거예요. :)\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null);\n\n  // 일정데이터가 지금은 Main 컴포넌트에 있죠!\n  // 아직은 그 데이터를 수정하기가 곤란해요.\n  // 리덕스를 붙이기 전까지는 우리 콘솔로 데이터 형식에 맞게 추가가 잘 되었나만 확인해봐요!\n  const writeTodo = () => {\n    // 콘솔로 내가 선택한 데이터가 잘 왔나 확인해볼까요? :)\n    // console.log(contents.current.value);\n    // console.log(datetime.current.value);\n\n    // 내용 없으면 경고!\n    if(contents.current.value === \"\"){\n        window.alert(\"내용을 입력해주세요!\");\n        return;\n    }\n\n    // 일시 없으면 경고!\n    if(datetime.current.value === \"\"){\n        window.alert(\"날짜를 입력해주세요!\");\n        return;\n    }\n    let _new_todo = {\n      todo_id: \"dummy_id1111\", // 아이디는 나중에 디비에 저장되면, 그때 가져와야죠! 일단 가짜로 둡니다!\n      datetime: moment(datetime.current.value).format(\"YYYY-MM-DD hh:mm:ss\"), // 우리 데이터 형식대로 맞춰줍니다.\n      contents: contents.current.value,\n      completed: false, // 지금 만들었으니 당연히 false겠죠!\n    };\n    // 주석을 풀고 데이터를 확인해봐요!\n    // console.log(_new_todo);\n\n    // 리덕스에 넣자!\n    dispatch(addTodo(_new_todo.datetime, _new_todo));\n    // 추가로 하나만 더! 일정을 추가했으면 원래 페이지로 돌아가야죠! replace 사용해봅시다!\n    props.history.replace(\"/\");\n  };\n\n  return (\n    <Grid margin=\"auto\" flex_direction=\"column\" width=\"80vw\" height=\"80vh\">\n      <Title type=\"title\">일정 만들기</Title>\n      <Grid\n        bg=\"#ffffff\"\n        flex_direction=\"column\"\n        width=\"80vw\"\n        padding=\"16px\"\n        margin=\"8px auto\"\n      >\n        <Text type=\"label\">- 내용 -</Text>\n        <Input type=\"text\" ref={contents} />\n\n        <Text type=\"label\">- 날짜 -</Text>\n        <Input type=\"datetime-local\" ref={datetime} />\n\n        <ButtonSave onClick={writeTodo}>일정 추가하기</ButtonSave>\n      </Grid>\n    </Grid>\n  );\n};\n\n\nconst Title = styled.h1`\n  color: #364f6b;\n  text-align: center;\n`;\n\nconst ButtonSave = styled.button`\n  padding: 10px 25px;\n  background-color: #3fc1c9;\n  color: white;\n  font-size:20px;\n  font-weight: bold;\n  border: 1px solid #3fc1c9;\n  border-radius: 30px;\n  margin: 30px 70px;\n  width: 200px;\n  height: 50px;\n`;\n\n\nexport default Write;\n"]},"metadata":{},"sourceType":"module"}