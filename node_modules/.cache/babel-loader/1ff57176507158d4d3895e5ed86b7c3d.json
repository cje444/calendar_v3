{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Main.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { loadTodoFB } from \"./redux/modules/todo\";\nimport Calendar from \"./Calendar\";\nimport Popup from \"./Popup\";\nimport { Button } from \"./Styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst _todo_list = {\n  \"2021-03-01\": [{\n    todo_id: 11,\n    datetime: \"2021-03-01 10:10:00\",\n    contents: \"산책가기1\",\n    completed: false\n  }, {\n    todo_id: 155555,\n    datetime: \"2021-03-01 10:15:00\",\n    contents: \"산책가기2\",\n    completed: true\n  }],\n  \"2021-03-21\": [{\n    todo_id: 8,\n    datetime: \"2021-03-21 10:00:00\",\n    contents: \"산책가기3\",\n    completed: false\n  }, {\n    todo_id: 4,\n    datetime: \"2021-03-21 10:10:00\",\n    contents: \"산책가기4\",\n    completed: false\n  }]\n};\n\nconst Main = props => {\n  _s();\n\n  // is_open 사용해서 팝업을 보였다가 안보이게 해줄거예요 :)\n  const [is_open, setIsOpen] = React.useState(false); // 이 값에 선택한 일정 정보를 넣어줄거예요.\n  // 없을 때는 null로!\n  // 앗, 여기서 잠깐! 팝업을 닫을 때 이 값을 어떻게 해줘야할까요?\n  // -> 그렇습니다 :) null로 다시 바꿔줘야죠!\n\n  const [selected_todo, setSeletedTodo] = React.useState(null); //   완료된 일정만 보기 토글이에요!\n  //   이 값은 캘린더에도 전달해줄거예요.\n  //   그럼 캘린더가 이 값을 보고 완료된 일정만 보여주자! 앗 아니야, 전체를 보여주자! 결정할 수 있겠죠? :)\n\n  const [show_completed, setShowCompleted] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      show_completed: show_completed,\n      _showPopup: setIsOpen,\n      _setSeletedTodo: setSeletedTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), is_open && /*#__PURE__*/_jsxDEV(Popup, {\n      type: \"todo_detail\",\n      selected_todo: selected_todo,\n      _showPopup: setIsOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BuBtnAddtton, {\n      float: true,\n      right: \"20px\",\n      bottom: \"20px\",\n      onClick: () => {\n        // 버튼을 눌렀을 때 페이지 이동이 잘되나 한 번 봅시다!\n        props.history.push('/write');\n      },\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BtnView, {\n      float: true,\n      right: \"20px\",\n      bottom: \"60px\",\n      onClick: () => {\n        //   !를 변수 앞에 붙여주면 무슨 뜻일까요? :) 찾아보기!\n        setShowCompleted(!show_completed);\n      },\n      children: show_completed ? \"전체 일정 보기\" : \"완료된 일정만 보기\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"WuIbmqb+B96EmPrpz4aWSwLERnw=\");\n\n_c = Main;\nconst BtnAdd = styled.button`\n  position: fixed;\n  bottom: 20vh;\n  right: 8vw;\n  background-color: #364f6b;\n  color: white;\n  font-size:25px;\n  font-weight: bold;\n  border: 1px solid #364f6b;\n  margin: 10px 70px;\n  border-radius: 40px;\n  width: 60px;\n  height: 60px;\n`;\nconst BtnView = styled.button`\nposition: fixed;\n  bottom: 12vh;\n  right: 8vw;\n  padding: 10px 25px;\n  background-color: #3fc1c9;\n  color: white;\n  font-size:18px;\n  font-weight: bold;\n  border: 1px solid #3fc1c9;\n  margin: 10px 70px;\n  border-radius: 30px;\n  width: 200px;\n  height: 50px;\n`;\n_c2 = BtnView;\nexport default Main;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"BtnView\");","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Main.js"],"names":["React","moment","styled","useSelector","useDispatch","loadTodoFB","Calendar","Popup","Button","_todo_list","todo_id","datetime","contents","completed","Main","props","is_open","setIsOpen","useState","selected_todo","setSeletedTodo","show_completed","setShowCompleted","history","push","BtnAdd","button","BtnView"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport styled from \"styled-components\"; \n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {loadTodoFB} from \"./redux/modules/todo\"\n\nimport Calendar from \"./Calendar\";\nimport Popup from \"./Popup\";\n\nimport { Button } from \"./Styles\";\n\nconst _todo_list = {\n  \"2021-03-01\": [\n    {\n      todo_id: 11,\n      datetime: \"2021-03-01 10:10:00\",\n      contents: \"산책가기1\",\n      completed: false,\n    },\n    {\n      todo_id: 155555,\n      datetime: \"2021-03-01 10:15:00\",\n      contents: \"산책가기2\",\n      completed: true,\n    },\n  ],\n  \"2021-03-21\": [\n    {\n      todo_id: 8,\n      datetime: \"2021-03-21 10:00:00\",\n      contents: \"산책가기3\",\n      completed: false,\n    },\n    {\n      todo_id: 4,\n      datetime: \"2021-03-21 10:10:00\",\n      contents: \"산책가기4\",\n      completed: false,\n    },\n  ],\n};\n\nconst Main = (props) => {\n  // is_open 사용해서 팝업을 보였다가 안보이게 해줄거예요 :)\n  const [is_open, setIsOpen] = React.useState(false);\n  // 이 값에 선택한 일정 정보를 넣어줄거예요.\n  // 없을 때는 null로!\n  // 앗, 여기서 잠깐! 팝업을 닫을 때 이 값을 어떻게 해줘야할까요?\n  // -> 그렇습니다 :) null로 다시 바꿔줘야죠!\n  const [selected_todo, setSeletedTodo] = React.useState(null);\n\n  //   완료된 일정만 보기 토글이에요!\n  //   이 값은 캘린더에도 전달해줄거예요.\n  //   그럼 캘린더가 이 값을 보고 완료된 일정만 보여주자! 앗 아니야, 전체를 보여주자! 결정할 수 있겠죠? :)\n  const [show_completed, setShowCompleted] = React.useState(false);\n\n\n  return (\n    <React.Fragment>\n      <Calendar\n        show_completed={show_completed}\n        _showPopup={setIsOpen}\n        _setSeletedTodo={setSeletedTodo}\n      />\n      {is_open && (\n        <Popup\n          type=\"todo_detail\"\n          selected_todo={selected_todo}\n          _showPopup={setIsOpen}\n        />\n      )}\n      <BuBtnAddtton\n        float\n        right=\"20px\"\n        bottom=\"20px\"\n        onClick={() => {\n          // 버튼을 눌렀을 때 페이지 이동이 잘되나 한 번 봅시다!\n          props.history.push('/write');\n        }}\n      >\n        +\n      </BuBtnAddtton>\n      <BtnView\n        float\n        right=\"20px\"\n        bottom=\"60px\"\n        onClick={() => {\n          //   !를 변수 앞에 붙여주면 무슨 뜻일까요? :) 찾아보기!\n          setShowCompleted(!show_completed);\n        }}\n      >\n        {show_completed ? \"전체 일정 보기\" : \"완료된 일정만 보기\"}\n      </BtnView>\n    </React.Fragment>\n  );\n};\n\n\n\nconst BtnAdd = styled.button`\n  position: fixed;\n  bottom: 20vh;\n  right: 8vw;\n  background-color: #364f6b;\n  color: white;\n  font-size:25px;\n  font-weight: bold;\n  border: 1px solid #364f6b;\n  margin: 10px 70px;\n  border-radius: 40px;\n  width: 60px;\n  height: 60px;\n`;\n\n\nconst BtnView= styled.button`\nposition: fixed;\n  bottom: 12vh;\n  right: 8vw;\n  padding: 10px 25px;\n  background-color: #3fc1c9;\n  color: white;\n  font-size:18px;\n  font-weight: bold;\n  border: 1px solid #3fc1c9;\n  margin: 10px 70px;\n  border-radius: 30px;\n  width: 200px;\n  height: 50px;\n`;\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}