{"ast":null,"code":"var _jsxFileName = \"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Calendar.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Button, Text } from \"./Styles\";\nimport moment from \"moment\"; // 임포트 해오기!\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeToday } from \"./redux/modules/todo\";\n/**\n * 달력 만들기 순서\n *  - 이번달이 몇 주가 필요한 지 \"주\"수 구하기\n *  - 주수만큼 map 돌리기\n *  - map 돌리면서 안에 날짜 넣어주기!\n *  - +) 일정도 같이 넣어주면 good!\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    show_completed,\n    _showPopup,\n    _setSeletedTodo\n  } = props;\n  const today = useSelector(state => state.todo.today);\n  const todo_list = useSelector(state => state.todo.todo_list); // 넘어온 데이터를 확인하자!\n  // console.log(todo_list);\n  // 이번달의 시작 주, 끝 주를 구합니다.\n\n  const start_week = moment(today).startOf(\"month\").week();\n  const end_week = moment(today).endOf(\"month\").week(); // 달력에 넣을 주수 배열 길이를 구합니다. (*주의* +1 해야함(7~11주는 총 몇 주인지 생각해보세요! :)!))\n  // 마지막 주가 다음 해 1주일 수 있어요. (시작 주보다 끝 주가 숫자가 작을 수 있다!)\n\n  const week_num = (start_week > end_week ? 53 - start_week : end_week - start_week) + 1; // 주수 길이의 배열을 만들고,\n\n  const _week_arr = Array.from({\n    length: week_num\n  }, (v, i) => start_week + i); // 주마다 7개씩 날짜를 넣어주면 끝!\n\n\n  const week_arr = _week_arr.map(week_index => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      margin: \"4px auto\",\n      flex_direction: \"row\",\n      children: Array.from({\n        length: 7\n      }, (v, i) => i).map(day_index => {\n        let _day = today.clone().startOf(\"year\").week(week_index).startOf(\"week\").add(day_index, \"day\");\n\n        const is_today = moment().format(\"YYYY-MM-DD\") === _day.format(\"YYYY-MM-DD\"); // todo_list(Main.js에서 props로 건네줬어요!)에 해당 일자 일정이 들어가 있나 보고, 추가해줍시다.\n\n\n        const list_index = Object.keys(todo_list).indexOf(_day.format(\"YYYY-MM-DD\")); // 주석풀고 데이터 확인해보기! :)!\n        // console.log(list_index);\n        // console.log(todo_list[_day.format(\"YYYY-MM-DD\")]);\n        // todo_list에 해당 일 일정이 있으면 일정을 list에 넣어주자! (없으면 null이나 빈배열로! 일단 빈배열로 해봅시다! :))\n\n        const _list = list_index !== -1 ? todo_list[_day.format(\"YYYY-MM-DD\")] : [];\n\n        const list = _list.map((_l, idx) => {\n          // 데이터 확인하기!\n          // console.log(_l);\n          // 일정을 뿌려줘요!\n          // 앗, 뿌려주기 전에 잠깐!! 만약 지금 보여줘야하는 데이터가 완료된 것만이라면?\n          //  -> 완료되지 않은 경우에는 null을 리턴해주면 되겠죠!\n          if (props.show_completed && !_l.completed) {\n            return null;\n          } // 쨔잔! 위의 if문에서 return 되지 않은 경우에만 이 밑으로 내려올 수 있으니, 여기서부턴 완료된 일정입니다 :)\n          // 혹은, 전체일정보기 모드(props로 받아온 show_completed가 false인 경우)던가요!\n\n\n          return /*#__PURE__*/_jsxDEV(Grid, {\n            hover: true,\n            bg: `${_l.completed ? \"yellow\" : \"aliceblue\"}`,\n            height: \"auto\",\n            margin: \"1px 0px\",\n            onClick: () => {\n              console.log(\"here\");\n\n              props._showPopup(true); // 여기에서 내가 선택한 일정 정보 전체를 넘겨줄거예요. (아이디만 넘기고, Popup 컴포넌트가 직접 데이터를 찾게 하면 더더더 좋아요!)\n\n\n              props._setSeletedTodo(_l);\n            },\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              type: \"label\",\n              children: _l.contents\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)\n          }, `${_l.datetime}_${_l.todo_id}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this);\n        });\n\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          margin: \"0px 2px\",\n          flex_direction: \"column\",\n          bg: is_today ? \"#ffcece\" : \"#ffffff\",\n          children: [_day.format(\"MM\") === moment(today).format(\"MM\") && /*#__PURE__*/_jsxDEV(Text, {\n            type: \"label\",\n            children: [_day.format(\"DD\"), \"\\uC77C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this), // 일정도 보여줍시다! :) null이 아닐때만 보여줘요!\n          _list && list]\n        }, `${moment(today).format(\"MM\")}_week_${week_index}_day_${day_index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this);\n      })\n    }, `${moment(today).format(\"MM\")}_week_${week_index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }); // 요일이 나올 배열도 만들어주기!\n\n\n  const dow = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map(_d => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      margin: \"4px 2px\",\n      width: \"100%\",\n      flex_direction: \"column\",\n      bg: \"#ffffff\",\n      height: \"auto\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        type: \"label\",\n        children: _d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, `${moment(today).format(\"MM\")}_week_${_d}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    flex_direction: \"column\",\n    width: \"80vw\",\n    height: \"80vh\",\n    margin: \"auto\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      justify_contents: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(BtnBefore, {\n        onClick: () => {\n          // 기준일을 한달 전으로 돌려요!\n          dispatch(changeToday(moment(today).clone().subtract(1, \"month\")));\n        },\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        type: \"title\",\n        children: [moment(today).format(\"MM\"), \"\\uC6D4\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BtnNext, {\n        onClick: () => {\n          // 기준일을 한달 후로 돌려요!\n          dispatch(changeToday(moment(today).clone().add(1, \"month\")));\n        },\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      height: \"auto\",\n      children: dow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), week_arr]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}; // 기본적으로 꼭 필요한 props를 미리 정해줍시다!\n\n\n_s(Calendar, \"+8bBss2VuuBMb/ltlaqUud3EFfI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Calendar;\nCalendar.defaultProps = {\n  _showPopup: () => {},\n  _setSeletedTodo: () => {}\n};\nconst BtnBefore = styled.button`\n  background-color: #364f6b;\n  color: white;\n  height: 40px;\n  width: 40px;\n  font-size: 30px;\n  font-weight: bold;\n  border-radius: 30px;\n  margin:20px;\n`;\n_c2 = BtnBefore;\nconst BtnNext = styled.button`\nbackground-color: #364f6b;\ncolor: white;\nheight: 40px;\nwidth: 40px;\nfont-size: 30px;\nfont-weight: bold;\nborder-radius: 30px;\nmargin:20px;\n`;\n_c3 = BtnNext;\nexport default Calendar;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Calendar\");\n$RefreshReg$(_c2, \"BtnBefore\");\n$RefreshReg$(_c3, \"BtnNext\");","map":{"version":3,"sources":["/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Calendar.js"],"names":["React","Grid","Button","Text","moment","useSelector","useDispatch","changeToday","Calendar","props","dispatch","show_completed","_showPopup","_setSeletedTodo","today","state","todo","todo_list","start_week","startOf","week","end_week","endOf","week_num","_week_arr","Array","from","length","v","i","week_arr","map","week_index","day_index","_day","clone","add","is_today","format","list_index","Object","keys","indexOf","_list","list","_l","idx","completed","console","log","contents","datetime","todo_id","dow","_d","subtract","defaultProps","BtnBefore","styled","button","BtnNext"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid, Button, Text } from \"./Styles\";\nimport moment from \"moment\";\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeToday } from \"./redux/modules/todo\";\n\n/**\n * 달력 만들기 순서\n *  - 이번달이 몇 주가 필요한 지 \"주\"수 구하기\n *  - 주수만큼 map 돌리기\n *  - map 돌리면서 안에 날짜 넣어주기!\n *  - +) 일정도 같이 넣어주면 good!\n */\nconst Calendar = (props) => {\n  const dispatch = useDispatch();\n\n  const {\n    show_completed,\n    _showPopup,\n    _setSeletedTodo,\n  } = props;\n\n  const today = useSelector((state) => state.todo.today);\n  const todo_list = useSelector((state) => state.todo.todo_list);\n  // 넘어온 데이터를 확인하자!\n  // console.log(todo_list);\n\n  // 이번달의 시작 주, 끝 주를 구합니다.\n  const start_week = moment(today).startOf(\"month\").week();\n  const end_week = moment(today).endOf(\"month\").week();\n\n  // 달력에 넣을 주수 배열 길이를 구합니다. (*주의* +1 해야함(7~11주는 총 몇 주인지 생각해보세요! :)!))\n  // 마지막 주가 다음 해 1주일 수 있어요. (시작 주보다 끝 주가 숫자가 작을 수 있다!)\n  const week_num =\n    (start_week > end_week ? 53 - start_week : end_week - start_week) + 1;\n\n  // 주수 길이의 배열을 만들고,\n  const _week_arr = Array.from({ length: week_num }, (v, i) => start_week + i);\n\n  // 주마다 7개씩 날짜를 넣어주면 끝!\n  const week_arr = _week_arr.map((week_index) => {\n    return (\n      <Grid\n        key={`${moment(today).format(\"MM\")}_week_${week_index}`}\n        margin=\"4px auto\"\n        flex_direction=\"row\"\n      >\n        {/*한 주는 7일이니, 주에 7개씩 날짜 칸을 넣어줍니다. */}\n        {Array.from({ length: 7 }, (v, i) => i).map((day_index) => {\n          let _day = today\n            .clone()\n            .startOf(\"year\")\n            .week(week_index)\n            .startOf(\"week\")\n            .add(day_index, \"day\");\n\n          const is_today =\n            moment().format(\"YYYY-MM-DD\") === _day.format(\"YYYY-MM-DD\");\n\n          // todo_list(Main.js에서 props로 건네줬어요!)에 해당 일자 일정이 들어가 있나 보고, 추가해줍시다.\n          const list_index = Object.keys(todo_list).indexOf(\n            _day.format(\"YYYY-MM-DD\")\n          );\n\n          // 주석풀고 데이터 확인해보기! :)!\n          // console.log(list_index);\n          // console.log(todo_list[_day.format(\"YYYY-MM-DD\")]);\n\n          // todo_list에 해당 일 일정이 있으면 일정을 list에 넣어주자! (없으면 null이나 빈배열로! 일단 빈배열로 해봅시다! :))\n          const _list =\n            list_index !== -1 ? todo_list[_day.format(\"YYYY-MM-DD\")] : [];\n\n          const list = _list.map((_l, idx) => {\n            // 데이터 확인하기!\n            // console.log(_l);\n            // 일정을 뿌려줘요!\n            // 앗, 뿌려주기 전에 잠깐!! 만약 지금 보여줘야하는 데이터가 완료된 것만이라면?\n            //  -> 완료되지 않은 경우에는 null을 리턴해주면 되겠죠!\n            if(props.show_completed && !_l.completed){\n              return null;\n            }\n\n            // 쨔잔! 위의 if문에서 return 되지 않은 경우에만 이 밑으로 내려올 수 있으니, 여기서부턴 완료된 일정입니다 :)\n            // 혹은, 전체일정보기 모드(props로 받아온 show_completed가 false인 경우)던가요!\n            return (\n              <Grid\n                hover\n                bg={`${_l.completed? \"yellow\": \"aliceblue\"}`}\n                height=\"auto\"\n                margin=\"1px 0px\"\n                key={`${_l.datetime}_${_l.todo_id}`}\n                onClick={() => {\n                  console.log(\"here\");\n\n                  props._showPopup(true);\n                  // 여기에서 내가 선택한 일정 정보 전체를 넘겨줄거예요. (아이디만 넘기고, Popup 컴포넌트가 직접 데이터를 찾게 하면 더더더 좋아요!)\n                  props._setSeletedTodo(_l);\n                }}\n              >\n                <Text type=\"label\">{_l.contents}</Text>\n              </Grid>\n            );\n          });\n          return (\n            <Grid\n              margin=\"0px 2px\"\n              key={`${moment(today).format(\n                \"MM\"\n              )}_week_${week_index}_day_${day_index}`}\n              flex_direction=\"column\"\n              bg={is_today ? \"#ffcece\" : \"#ffffff\"}\n            >\n              {_day.format(\"MM\") === moment(today).format(\"MM\") && (\n                <Text type=\"label\">{_day.format(\"DD\")}일</Text>\n              )}\n\n              {\n                // 일정도 보여줍시다! :) null이 아닐때만 보여줘요!\n                _list && list\n              }\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  });\n\n  // 요일이 나올 배열도 만들어주기!\n  const dow = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((_d) => {\n    return (\n      <Grid\n        margin=\"4px 2px\"\n        width=\"100%\"\n        flex_direction=\"column\"\n        bg={\"#ffffff\"}\n        height=\"auto\"\n        key={`${moment(today).format(\"MM\")}_week_${_d}`}\n      >\n        <Text bold type=\"label\">\n          {_d}\n        </Text>\n      </Grid>\n    );\n  });\n\n  return (\n    <Grid flex_direction=\"column\" width=\"80vw\" height=\"80vh\" margin=\"auto\">\n      <Grid justify_contents=\"space-between\">\n        <BtnBefore\n          onClick={() => {\n            // 기준일을 한달 전으로 돌려요!\n            dispatch(changeToday(moment(today).clone().subtract(1, \"month\")));\n          }}\n        >\n          ←\n        </BtnBefore>\n        <Text type=\"title\">{moment(today).format(\"MM\")}월</Text>\n        <BtnNext\n          onClick={() => {\n            // 기준일을 한달 후로 돌려요!\n            dispatch(changeToday(moment(today).clone().add(1, \"month\")));\n          }}\n        >\n          →\n        </BtnNext>\n      </Grid>\n      <Grid height=\"auto\">{dow}</Grid>\n      {week_arr}\n    </Grid>\n  );\n};\n\n\n\n// 기본적으로 꼭 필요한 props를 미리 정해줍시다!\nCalendar.defaultProps = {\n  _showPopup: () => {},\n  _setSeletedTodo: () => {}\n};\n\n\nconst BtnBefore = styled.button`\n  background-color: #364f6b;\n  color: white;\n  height: 40px;\n  width: 40px;\n  font-size: 30px;\n  font-weight: bold;\n  border-radius: 30px;\n  margin:20px;\n`;\n\nconst BtnNext = styled.button`\nbackground-color: #364f6b;\ncolor: white;\nheight: 40px;\nwidth: 40px;\nfont-size: 30px;\nfont-weight: bold;\nborder-radius: 30px;\nmargin:20px;\n`;\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}