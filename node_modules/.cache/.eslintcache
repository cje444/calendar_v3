[{"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/index.js":"1","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/reportWebVitals.js":"2","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/App.js":"3","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/redux/configureStore.js":"4","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Write.js":"5","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Styles.js":"6","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Main.js":"7","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/redux/modules/todo.js":"8","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Calendar.js":"9","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Popup.js":"10","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/firebase.js":"11","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Month.js":"12"},{"size":583,"mtime":1616612576000,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1616510208000,"results":"15","hashOfConfig":"14"},{"size":1959,"mtime":1616683064781,"results":"16","hashOfConfig":"14"},{"size":436,"mtime":1616674262213,"results":"17","hashOfConfig":"14"},{"size":2919,"mtime":1616682223746,"results":"18","hashOfConfig":"14"},{"size":3308,"mtime":1616609184000,"results":"19","hashOfConfig":"14"},{"size":3653,"mtime":1616683138040,"results":"20","hashOfConfig":"14"},{"size":9403,"mtime":1616683238987,"results":"21","hashOfConfig":"14"},{"size":6712,"mtime":1616681014840,"results":"22","hashOfConfig":"14"},{"size":4755,"mtime":1616616946000,"results":"23","hashOfConfig":"14"},{"size":555,"mtime":1616662399768,"results":"24","hashOfConfig":"14"},{"size":3099,"mtime":1616683176455,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8f2d7g",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/index.js",[],["54","55"],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/reportWebVitals.js",[],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/App.js",[],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/redux/configureStore.js",[],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Write.js",["56","57"],"import React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {addTodo} from \"./redux/modules/todo\";\n\nconst Write = (props) => {\n  // 디스패치부터 만들기!\n  const dispatch = useDispatch();\n  // 작성할 내용과 시간을 ref로 넣을거예요. :)\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null);\n\n  // 일정데이터가 지금은 Main 컴포넌트에 있죠!\n  // 아직은 그 데이터를 수정하기가 곤란해요.\n  // 리덕스를 붙이기 전까지는 우리 콘솔로 데이터 형식에 맞게 추가가 잘 되었나만 확인해봐요!\n  const writeTodo = () => {\n    // 콘솔로 내가 선택한 데이터가 잘 왔나 확인해볼까요? :)\n    // console.log(contents.current.value);\n    // console.log(datetime.current.value);\n\n    // 내용 없으면 경고!\n    if(contents.current.value === \"\"){\n        window.alert(\"내용을 입력해주세요!\");\n        return;\n    }\n\n    // 일시 없으면 경고!\n    if(datetime.current.value === \"\"){\n        window.alert(\"날짜를 입력해주세요!\");\n        return;\n    }\n    let _new_todo = {\n      todo_id: \"dummy_id1111\", // 아이디는 나중에 디비에 저장되면, 그때 가져와야죠! 일단 가짜로 둡니다!\n      datetime: moment(datetime.current.value).format(\"YYYY-MM-DD hh:mm:ss\"), // 우리 데이터 형식대로 맞춰줍니다.\n      contents: contents.current.value,\n      completed: false, // 지금 만들었으니 당연히 false겠죠!\n    };\n    // 주석을 풀고 데이터를 확인해봐요!\n    // console.log(_new_todo);\n\n    // 리덕스에 넣자!\n    dispatch(addTodo(_new_todo.datetime, _new_todo));\n    // 추가로 하나만 더! 일정을 추가했으면 원래 페이지로 돌아가야죠! replace 사용해봅시다!\n    props.history.replace(\"/\");\n  };\n\n  return (\n    <Grid margin=\"auto\" flex_direction=\"column\" width=\"80vw\" height=\"80vh\">\n      <Title type=\"title\">일정 만들기</Title>\n      <Grid\n        bg=\"#ffffff\"\n        flex_direction=\"column\"\n        width=\"80vw\"\n        padding=\"16px\"\n        margin=\"8px auto\"\n      >\n        <Text type=\"label\">- 내용 -</Text>\n        <Input type=\"text\" ref={contents} />\n\n        <Text type=\"label\">- 날짜 -</Text>\n        <Input type=\"datetime-local\" ref={datetime} />\n\n        <ButtonSave onClick={writeTodo}>일정 추가하기</ButtonSave>\n      </Grid>\n    </Grid>\n  );\n};\n\n\nconst Title = styled.h1`\n  color: #364f6b;\n  text-align: center;\n`;\n\nconst ButtonSave = styled.button`\n  padding: 10px 25px;\n  background-color: #3fc1c9;\n  color: white;\n  font-size:20px;\n  font-weight: bold;\n  border: 1px solid #3fc1c9;\n  border-radius: 30px;\n  margin: 30px 70px;\n  width: 200px;\n  height: 50px;\n`;\n\n\nexport default Write;\n","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Styles.js",[],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Main.js",["58","59","60","61","62","63"],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/redux/modules/todo.js",["64"],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Calendar.js",["65","66","67","68"],"import React from \"react\";\nimport { Grid, Button, Text } from \"./Styles\";\nimport moment from \"moment\";\nimport styled from \"styled-components\"\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { changeToday } from \"./redux/modules/todo\";\n\n/**\n * 달력 만들기 순서\n *  - 이번달이 몇 주가 필요한 지 \"주\"수 구하기\n *  - 주수만큼 map 돌리기\n *  - map 돌리면서 안에 날짜 넣어주기!\n *  - +) 일정도 같이 넣어주면 good!\n */\nconst Calendar = (props) => {\n  const dispatch = useDispatch();\n\n  const {\n    show_completed,\n    _showPopup,\n    _setSeletedTodo,\n  } = props;\n\n  const today = useSelector((state) => state.todo.today);\n  const todo_list = useSelector((state) => state.todo.todo_list);\n  // 넘어온 데이터를 확인하자!\n  // console.log(todo_list);\n\n  // 이번달의 시작 주, 끝 주를 구합니다.\n  const start_week = moment(today).startOf(\"month\").week();\n  const end_week = moment(today).endOf(\"month\").week();\n\n  // 달력에 넣을 주수 배열 길이를 구합니다. (*주의* +1 해야함(7~11주는 총 몇 주인지 생각해보세요! :)!))\n  // 마지막 주가 다음 해 1주일 수 있어요. (시작 주보다 끝 주가 숫자가 작을 수 있다!)\n  const week_num =\n    (start_week > end_week ? 53 - start_week : end_week - start_week) + 1;\n\n  // 주수 길이의 배열을 만들고,\n  const _week_arr = Array.from({ length: week_num }, (v, i) => start_week + i);\n\n  // 주마다 7개씩 날짜를 넣어주면 끝!\n  const week_arr = _week_arr.map((week_index) => {\n    return (\n      <Grid\n        key={`${moment(today).format(\"MM\")}_week_${week_index}`}\n        margin=\"4px auto\"\n        flex_direction=\"row\"\n      >\n        {/*한 주는 7일이니, 주에 7개씩 날짜 칸을 넣어줍니다. */}\n        {Array.from({ length: 7 }, (v, i) => i).map((day_index) => {\n          let _day = today\n            .clone()\n            .startOf(\"year\")\n            .week(week_index)\n            .startOf(\"week\")\n            .add(day_index, \"day\");\n\n          const is_today =\n            moment().format(\"YYYY-MM-DD\") === _day.format(\"YYYY-MM-DD\");\n\n          // todo_list(Main.js에서 props로 건네줬어요!)에 해당 일자 일정이 들어가 있나 보고, 추가해줍시다.\n          const list_index = Object.keys(todo_list).indexOf(\n            _day.format(\"YYYY-MM-DD\")\n          );\n\n          // 주석풀고 데이터 확인해보기! :)!\n          // console.log(list_index);\n          // console.log(todo_list[_day.format(\"YYYY-MM-DD\")]);\n\n          // todo_list에 해당 일 일정이 있으면 일정을 list에 넣어주자! (없으면 null이나 빈배열로! 일단 빈배열로 해봅시다! :))\n          const _list =\n            list_index !== -1 ? todo_list[_day.format(\"YYYY-MM-DD\")] : [];\n\n          const list = _list.map((_l, idx) => {\n            // 데이터 확인하기!\n            // console.log(_l);\n            // 일정을 뿌려줘요!\n            // 앗, 뿌려주기 전에 잠깐!! 만약 지금 보여줘야하는 데이터가 완료된 것만이라면?\n            //  -> 완료되지 않은 경우에는 null을 리턴해주면 되겠죠!\n            if(props.show_completed && !_l.completed){\n              return null;\n            }\n\n            // 쨔잔! 위의 if문에서 return 되지 않은 경우에만 이 밑으로 내려올 수 있으니, 여기서부턴 완료된 일정입니다 :)\n            // 혹은, 전체일정보기 모드(props로 받아온 show_completed가 false인 경우)던가요!\n            return (\n              <Grid\n                hover\n                bg={`${_l.completed? \"yellow\": \"aliceblue\"}`}\n                height=\"auto\"\n                margin=\"1px 0px\"\n                key={`${_l.datetime}_${_l.todo_id}`}\n                onClick={() => {\n                  console.log(\"here\");\n\n                  props._showPopup(true);\n                  // 여기에서 내가 선택한 일정 정보 전체를 넘겨줄거예요. (아이디만 넘기고, Popup 컴포넌트가 직접 데이터를 찾게 하면 더더더 좋아요!)\n                  props._setSeletedTodo(_l);\n                }}\n              >\n                <Text type=\"label\">{_l.contents}</Text>\n              </Grid>\n            );\n          });\n          return (\n            <Grid\n              margin=\"0px 2px\"\n              key={`${moment(today).format(\n                \"MM\"\n              )}_week_${week_index}_day_${day_index}`}\n              flex_direction=\"column\"\n              bg={is_today ? \"#ffcece\" : \"#ffffff\"}\n            >\n              {_day.format(\"MM\") === moment(today).format(\"MM\") && (\n                <Text type=\"label\">{_day.format(\"DD\")}일</Text>\n              )}\n\n              {\n                // 일정도 보여줍시다! :) null이 아닐때만 보여줘요!\n                _list && list\n              }\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  });\n\n  // 요일이 나올 배열도 만들어주기!\n  const dow = [\"일\", \"월\", \"화\", \"수\", \"목\", \"금\", \"토\"].map((_d) => {\n    return (\n      <Grid\n        margin=\"4px 2px\"\n        width=\"100%\"\n        flex_direction=\"column\"\n        bg={\"#ffffff\"}\n        height=\"auto\"\n        key={`${moment(today).format(\"MM\")}_week_${_d}`}\n      >\n        <Text bold type=\"label\">\n          {_d}\n        </Text>\n      </Grid>\n    );\n  });\n\n  return (\n    <Grid flex_direction=\"column\" width=\"80vw\" height=\"80vh\" margin=\"auto\">\n      <Grid justify_contents=\"space-between\">\n        <BtnBefore\n          onClick={() => {\n            // 기준일을 한달 전으로 돌려요!\n            dispatch(changeToday(moment(today).clone().subtract(1, \"month\")));\n          }}\n        >\n          ←\n        </BtnBefore>\n        <Text type=\"title\">{moment(today).format(\"MM\")}월</Text>\n        <BtnNext\n          onClick={() => {\n            // 기준일을 한달 후로 돌려요!\n            dispatch(changeToday(moment(today).clone().add(1, \"month\")));\n          }}\n        >\n          →\n        </BtnNext>\n      </Grid>\n      <Grid height=\"auto\">{dow}</Grid>\n      {week_arr}\n    </Grid>\n  );\n};\n\n\n\n// 기본적으로 꼭 필요한 props를 미리 정해줍시다!\nCalendar.defaultProps = {\n  _showPopup: () => {},\n  _setSeletedTodo: () => {}\n};\n\n\nconst BtnBefore = styled.button`\n  background-color: #364f6b;\n  color: white;\n  height: 40px;\n  width: 40px;\n  font-size: 30px;\n  font-weight: bold;\n  border-radius: 30px;\n  margin:20px;\n`;\n\nconst BtnNext = styled.button`\nbackground-color: #364f6b;\ncolor: white;\nheight: 40px;\nwidth: 40px;\nfont-size: 30px;\nfont-weight: bold;\nborder-radius: 30px;\nmargin:20px;\n`;\n\nexport default Calendar;\n","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Popup.js",["69"],"import React from \"react\";\nimport { Grid, Button, Text, Input } from \"./Styles\";\nimport moment from \"moment\";\n\nimport styled from \"styled-components\";\n\n// 임포트 해오기!\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateTodo, deleteTodo } from \"./redux/modules/todo\";\n\nconst Popup = (props) => {\n  const dispatch = useDispatch();\n  const { type, selected_todo, _showPopup} = props;\n\n  const contents = React.useRef(null);\n  const datetime = React.useRef(null);\n\n  // 팝업 타입이 todo_detail일 경우!\n  if (type === \"todo_detail\") {\n    if (!selected_todo) {\n      return null;\n    }\n    return (\n      <Dim\n        onClick={(e) => {\n          // 팝업 닫기!\n          props._showPopup(false);\n        }}\n      >\n        <Grid\n          bg=\"#ffffff\"\n          width=\"50vw\"\n          margin=\"auto\"\n          height=\"auto\"\n          padding=\"16px\"\n          onClick={(e) => {\n            // 이벤트 전파를 막아줘요! 2주차 과제 하실 때 본 칭구들! :)\n            e.stopPropagation();\n          }}\n        >\n          <Grid flex_direction=\"column\">\n            <Grid padding=\"0px 0px 8px 0px\" justify_contents=\"space-between\">\n              <Text type=\"title\">일정 상세보기</Text>\n              {!selected_todo.completed && (\n                <Button\n                  onClick={() => {\n                    //   완료 데이터를 만들어줄거예요.\n                    let update_data = { ...selected_todo, completed: true };\n\n                    //   그리고 데이터 수정하는 액션를 불러다가 수정!\n                    dispatch(\n                      updateTodo(\n                        moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                        selected_todo.todo_id,\n                        update_data\n                      )\n                    );\n                    _showPopup(false);\n                  }}\n                >\n                  완료\n                </Button>\n              )}\n            </Grid>\n            <Grid flex_direction=\"column\">\n              <Text type=\"label\">내용</Text>\n              <Input\n                type=\"text\"\n                placeholder={selected_todo.contents}\n                ref={contents}\n              />\n              <Text type=\"label\">일자</Text>\n              <Input\n                type=\"datetime-local\"\n                placeholder={selected_todo.datetime}\n                ref={datetime}\n              />\n            </Grid>\n            <Grid></Grid>\n            <Grid\n              border=\"1px 0px 0px 0px solid #888\"\n              justify_contents=\"space-between\"\n            >\n              <Button\n                bg\n                onClick={() => {\n                  dispatch(\n                    deleteTodo(\n                      moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                      selected_todo.todo_id\n                    )\n                  );\n                  _showPopup(false);\n                }}\n              >\n                삭제\n              </Button>\n              <Button\n                onClick={() => {\n                  //   수정할 데이터를 만들어줄거예요.\n                  let update_data = {};\n                  //   입력한 내용이 없으면 그대로 유지!\n                  let _contents =\n                    contents.current.value === \"\"\n                      ? selected_todo.contents\n                      : contents.current.value;\n                  let _datetime =\n                    datetime.current.value === \"\"\n                      ? selected_todo.datetime\n                      : datetime.current.value;\n\n                  //   수정할 데이터를 만들어요!\n                  update_data = {\n                    ...selected_todo,\n                    contents: _contents,\n                    datetime: moment(_datetime).format(\"YYYY-MM-DD hh:mm:ss\"),\n                  };\n\n                  dispatch(\n                    updateTodo(\n                      moment(selected_todo.datetime).format(\"YYYY-MM-DD\"),\n                      selected_todo.todo_id,\n                      update_data\n                    )\n                  );\n                  _showPopup(false);\n                }}\n              >\n                수정\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Dim>\n    );\n  }\n\n  return null;\n};\n\nPopup.defaultProps = {\n  type: \"alert\",\n  selected_todo: null,\n  _showPopup: () => {},\n};\n\n// background: #00000055; <- 앗 해쉬가 8글자? :) 6글자는 컬러를, 뒤의 두글자는 투명도를 나타냅니다.\nconst Dim = styled.div`\n  position: fixed;\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  background: #00000055;\n`;\n\nexport default Popup;\n","/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/firebase.js",[],"/Users/jeongeunchoi/Calendar_v2/calendar_v3/src/Month.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":16,"nodeType":"76","messageId":"77","endLine":2,"endColumn":22},{"ruleId":"74","severity":1,"message":"78","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":21},{"ruleId":"74","severity":1,"message":"79","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":14},{"ruleId":"74","severity":1,"message":"78","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":21},{"ruleId":"74","severity":1,"message":"80","line":5,"column":23,"nodeType":"76","messageId":"77","endLine":5,"endColumn":34},{"ruleId":"74","severity":1,"message":"81","line":6,"column":9,"nodeType":"76","messageId":"77","endLine":6,"endColumn":19},{"ruleId":"74","severity":1,"message":"75","line":11,"column":10,"nodeType":"76","messageId":"77","endLine":11,"endColumn":16},{"ruleId":"74","severity":1,"message":"82","line":13,"column":7,"nodeType":"76","messageId":"77","endLine":13,"endColumn":17},{"ruleId":"83","severity":1,"message":"84","line":121,"column":5,"nodeType":"85","messageId":"86","endLine":153,"endColumn":6},{"ruleId":"74","severity":1,"message":"75","line":2,"column":16,"nodeType":"76","messageId":"77","endLine":2,"endColumn":22},{"ruleId":"74","severity":1,"message":"87","line":21,"column":5,"nodeType":"76","messageId":"77","endLine":21,"endColumn":19},{"ruleId":"74","severity":1,"message":"88","line":22,"column":5,"nodeType":"76","messageId":"77","endLine":22,"endColumn":15},{"ruleId":"74","severity":1,"message":"89","line":23,"column":5,"nodeType":"76","messageId":"77","endLine":23,"endColumn":20},{"ruleId":"74","severity":1,"message":"78","line":8,"column":10,"nodeType":"76","messageId":"77","endLine":8,"endColumn":21},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useSelector' is defined but never used.","'moment' is defined but never used.","'useDispatch' is defined but never used.","'loadTodoFB' is defined but never used.","'_todo_list' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'show_completed' is assigned a value but never used.","'_showPopup' is assigned a value but never used.","'_setSeletedTodo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]